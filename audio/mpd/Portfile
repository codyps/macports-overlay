# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           meson 1.0

name                mpd

version             0.21.22
revision            1
set branch          [join [lrange [split ${version} .] 0 1] .]
categories          audio
maintainers         nomaintainer
description         Music Player Daemon
long_description    Music Player Daemon (MPD) allows remote access for playing music \
    (MP3, Ogg Vorbis, FLAC, AAC, Mod, and wave files) and managing \
    playlists. MPD is designed for integrating a computer into a stereo \
    system that provides control for music playback over a local network. \
    It also makes a great desktop music player, especially if you are a \
    console junkie, like frontend options, or restart X often.
homepage            https://www.musicpd.org/
platforms           darwin
master_sites        https://www.musicpd.org/download/${name}/${branch}/
license             GPL-2+ LGPL-2.1
use_xz              yes

checksums           rmd160  1fe7d8193c52b0d65382ed990e2fd2b9692414ca \
                    sha256  565687d1899b585350cd66b603e46e5b79affc0a0e36d96d8953c6ccc6f69ba2 \
                    size    679244

depends_build \
    port:pkgconfig

# this port only uses boost headers during build
# and does not link with any boost libraries
# no need to rebuild due to boost library ABI changes
depends_build-append \
    port:boost

depends_lib \
    port:audiofile \
    port:curl \
    port:faad2 \
    port:flac \
    path:lib/pkgconfig/glib-2.0.pc:glib2 \
    port:icu \
    port:libcdio-paranoia \
    port:libcue \
    port:libiconv \
    port:libid3tag \
    port:libogg \
    port:libvorbis \
    port:zlib \
    port:libao \
    port:dbus \
    port:jack \
    port:sqlite3 \
    port:libopus \
    port:yajl \
    port:libzzip \
    port:libshout2 \
    port:py-sphinx

# requires C++14
compiler.cxx_standard 2014
compiler.blacklist-append {clang < 700.0.72}

# Note: we set auto_features=enabled to ensure that we properly encode
# dependencies associated with features.
#
# Using it avoids needing to list things both in dependencies and in the configure args
configure.args \
    -Dauto_features=enabled \
    -Ddocumentation=true \
    -Dffmpeg=disabled \
    -Dchromaprint=disabled \
    -Djack=disabled \
    -Dmpcdec=disabled \
    -Dmikmod=disabled \
    -Dmodplug=disabled \
    -Dmpg123=disabled \
    -Dmad=disabled \
    -Dadplug=disabled \
    -Dfluidsynth=disabled \
    -Dshine=disabled \
    -Dtwolame=disabled \
    -Dmp3lame=disabled \
    -Dsidplay=disabled \
    -Dwildmidi=disabled \
    -Dwavpack=disabled \
    -Dsmbclient=disabled \
    -Dnfs=disabled \
    -Dgme=disabled \
    -Doss=disabled \
    -Dpulse=disabled \
    -Dsndio=disabled \
    -Dupnp=disabled \
    -Dmms=disabled \
    -Dtremor=disabled

configure.cflags-append -I${prefix}/include

variant mpcdec description {Support for musepack via libmpcdec} {
    depends_lib-append  port:libmpcdec
    configure.args-delete -Dmpcdec=disabled
}
variant ffmpeg description {Support for myriad formats via ffmpeg} {
    depends_lib-append	path:lib/libavcodec.dylib:ffmpeg
    configure.args-delete -Dffmpeg=disabled
}
variant mod description {Support for several formats of tracker/sequencer files via libmikmod} {
    depends_lib-append    port:libmikmod
    configure.args-delete -Dmikmod=disabled
}
variant modplug description {Support for several formats of tracker/sequencer files via libmodplug} {
    depends_lib-append    port:libmodplug
    configure.args-delete -Dmodplug=disabled
}
variant mpg123 conflicts mad description {Use mpg123 rather than mad as mp3 deconding library} {
    depends_lib-append    port:mpg123
    configure.args-delete -Dmpg123=disabled
}
variant mad conflicts mpg123 description (Use mad rather than mpg123 as mp3 decoding library} {
    depends_lib-append      port:libmad
    configure.args-delete -Dmad=disabled
}
if {![variant_isset mpg123]} {
    default_variants    +mad
}

#pre-configure {
#    set fid [open ${workpath}/cross.txt w]
#    puts $fid {[binaries]}
#    puts $fid "sphinx-build = 'sphinx-build-py38'"
#    close $fid
#}

#configure.args-append --cross ${workpath}/cross.txt

# requires support for C++14.
compiler.cxx_standard   2014

if {${os.platform} eq "darwin" && ${os.major} > 8} {
    set mpduser       _mpd
} else {
    set mpduser       mpd
}
# Create new user for mpd:
add_users ${mpduser} group=${mpduser} realname=Music\ Player\ Daemon

startupitem.create  yes
startupitem.start   "${prefix}/bin/mpd --no-daemon ${prefix}/etc/mpd.conf"
startupitem.stop    "${prefix}/bin/mpd --kill"
destroot.keepdirs   ${destroot}${prefix}/var/lib/mpd/music \
    ${destroot}${prefix}/var/lib/mpd/playlists \
    ${destroot}${prefix}/var/log/mpd
post-destroot {
    # ensure ${prefix}/var/[lib/mpd/[music,playlists],log/mpd] exist
    xinstall -m 755 -o ${mpduser} -g ${mpduser} -d \
    ${destroot}${prefix}/var/lib/mpd \
    ${destroot}${prefix}/var/lib/mpd/music \
    ${destroot}${prefix}/var/lib/mpd/playlists \
    ${destroot}${prefix}/var/log/mpd

    xinstall -m 644 ${filespath}/mpd.conf ${destroot}${prefix}/etc/mpd.conf.default
    reinplace "s|%%PREFIX%%|${prefix}|g" \
        ${destroot}${prefix}/etc/mpd.conf.default
    reinplace "s|%%MPDUSER%%|${mpduser}|g" \
        ${destroot}${prefix}/etc/mpd.conf.default
}
post-activate {
    if {![file exists ${prefix}/etc/mpd.conf]} {
        copy ${prefix}/etc/mpd.conf.default ${prefix}/etc/mpd.conf
    }
}

notes "A basic configuration file has been created for you.
To add music to mpd's database, create symbolic links in
${prefix}/var/lib/mpd/music using 'ln -s'.  For advanced
configuration, run \"man mpd.conf\" or refer to
${prefix}/share/doc/mpd/mpdconf.example for an example configuration file.

You may get \"Problems shmget'ing\" message when launching mpd.
In this case, you can increase the values of kern.sysv.shmmax and
kern.sysv.shmall in /etc/rc."

livecheck.type      regex
livecheck.url       ${homepage}
livecheck.regex     "MPD (\\d+(?:\\.\\d+)*) released"
